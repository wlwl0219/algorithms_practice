// 1-1. 입력된 수가 짝수라면 2로 나눕니다.
// 1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다.
// 2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다.

// 예를 들어, 입력된 수가 6이라면 6→3→10→5→16→8→4→2→1
// 이 되어 총 8번 만에 1이 됩니다.
// 위 작업을 몇 번이나 반복해야하는지 반환하는 함수, solution을 완성해 주세요.
// 단, 작업을 500번을 반복해도 1이 되지 않는다면 –1을 반환해 주세요.

// Precautions
// 입력된 수, num은 1 이상 8000000 미만인 정수입니다.

// solution 1
// 반복한 횟수를 담을 변수를 만들고 0을 할당한다.
// num이 1이 아니고, 반복 횟수가 500이 아닐때 까지
// 짝수라면 2로 나누고 홀수라면 3을 곱하고 1을 더한 값을
// num에 할당하고 횟수에 1을 더하며 반복한다.
// 반복문이 끝나면 num이 1일 땐 횟수를 반환하고 아닐땐 -1을 반환한다.
function solution(num) {
  let count = 0;
  while (num !== 1 && count !== 500) {
    num = num % 2 ? num * 3 + 1 : num / 2;
    count++;
  }
  return num === 1 ? count : -1;
}
